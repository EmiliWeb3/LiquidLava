#The src/ directory
System-wide or uncategorized
	- [P5,Refactoring] isLiteral - move to one place
	- [P5,Refactoring] "use strict"
	- [P3,Feature] new selector for event and role targets: NameAndLabel
		// affects ExpressionParser, view.Abstract, ViewManager
	- [P3,Refactoring, Performance] inside sleep() of the views it's not needed to turn off the argument listeners, only arguments themselves.
	- [P5,Performance,Q] turn off view bindings in sleep() (*)
	- [P5,Feature,Q] hard_refresh event for views hierarchy
		// to force refresh of views, which are bound to plain JS objects (like Angular refresh cycle)
	- [P5,Feature,Performance,Q] new kind of template includes - inlineInclude. Will be replaced in config, one time and forever.
	- [P2,Refactoring] Widget and Refresher* must not access Firestorm.Element
	- [P3,Refactoring] CONTROL_ATTRIBUTE_PREFIX and some other constants must be moved into Lava or schema
	- [P5,Refactoring] remove "active modifiers" (see parsers, Argument and support)
	- [P3,Feature] CSS compression, including class names
	- [P3,Feature] Resource names compression
	- [P5,Refactoring] search the framework code and find possibilities to rewrite for usage of:
		Firestorm.Array.exclude and Firestorm.Object.copy
		// Firestorm.Object.copy may be used in ClassManager in place of extend()
	- [P3,Feature] config extenders should be turned into normal class, and created in Lava.init()
	- [P5,Feature] {&gt;property: $path.to.include} - an include, which takes template from property.
	- [P3,Feature, Performance] new kind of argument - StaticArgument for one-time calculations. Use it in static_eval
		// must not attach listeners
	- [P3,Refactoring,Performance] Possible optimization: if Argument is equal to scope binding, than do not create an argument, get the binding.
		// search every place where Argument is used
	- [P3,Feature,Performance] Segment option to evaluate it's property name only once and do not create listeners
		// in expression parser it will be curly braces instead of square: row{column.name}
	- [P4,Refactoring] Move some exception texts into Lava.known_exceptions (like 'abstract function call')
	- [P5,Feature,Q] add possibility to have several Lava versions on one page
	- [P4,Refactoring] one DEBUG switch should be split into several.
		// like:
		// DEBUG_SCOPES - the scope processiong cycle,<br/>
		// DEBUG_FATAL - useful explanations before something will fail anyway (may be safely turned off in release),<br/>
		// DEBUG_DEV - wrong configuration by the programmer. <br/>
		// DEBUG_PARSERS - wrong templates <br/>
		// DEBUG_LISTENERS - listeners on destroyed objects
	- [P5,Refactoring] some DEBUG checks should become permanent
	- [P3,Refactoring] _cRawBlock.class_locator.name - rename to locator and change type to _cViewLocator.
		Same for _cWidgetConfig.class_locator.
	- [P3,Refactoring] ScopeManager::scheduleScopeRefresh: do not return an object, use property of the Refreshable.
	- [P2,Dev] recursive x:binding and x:assign protection.
		// Currently, you can create an assign of any property to itself
	- [P3,Fix] fixes for old IE: check if get/set value on &lt;select&gt; elements works as expected. Write tests.
		// see <br/>
		// https://mootools.lighthouseapp.com/projects/2706/tickets/1116 <br/>
		// https://github.com/mootools/mootools-core/issues/2041 <br/>
		// and Source\Element\Element.js in MooTools
	- [P3,Fix] fixes for old IE: check if event delegation for "change" event and others works in IE 8 and less.

Animation/
	- [P5,Feature] pulsating and cyclic animations
		// most likely, there will be another independent class - AnimationSequence
	- [P5,Feature,Q] animations should switch to transitions, if browser supports them
		// there must be a separate setting in the shema, USE_TRANSITIONS
Animation/BootstrapCollapse.class.js
	- [P5,Feature] check for transitions support. If browser does not support transitions - apply end state immediately, without waiting.
Animation/Toggle.class.js
	- [P5,Refactoring] must inherit from Emulated, + missing some important code
Data/
	- [P2,Feature] schema switch to turn off validation
	- [P2,Feature] an ability to unload records from modules to free memory.
	- [P3,Feature] DateTime field. Will be serialized to integer, but internal value will be a Date object.
	- [P4,Feature] Record and Collection fields should be exportable
	- [P5,Feature] fields with calculated value and dependencies.
		// Something like this:
		// <pre>title: {
		//		get: function() { return this.get('first_name') + ' ' + ...}
		//		depends:['first_name', 'last_name']
		//	}</pre>
Data/Field/
	- [P5,Performance] Integer and Id fields: invent some better check than regex
		// this._shared.valid_value_regex.test(value)
Data/ModuleAbstract.class.js
	- [P5,Refactoring] destroy: Should the records be destroyed, and how? See comment inside destroy()
	- [P3,Performance, Refactoring] record storage should be created from a function (now it's an object)
Firestorm/
	- [P5,Feature] Element.fromHTML(html)
		// turn html into nodes, assert there is only one and return it
	- [P5,Performance] use insertAdjacentHTML where possible (*)
	- [P5,Performance] implement fast offset calculation algorithm (*)
	- [P4,Performance] use native element's classList property in addClass(es), removeClass(es), hasClass
Parsers/
	- [P5,Feature] x:classBinding directive - alternative form for x:class attribute
	- [P2,Dev] make the text for exception "Text is not allowed in this context" inside asBlocks() more meaningful
		// text should depend on context
	- [P3,Feature] x:controller control attribute - similar to x:widget
		// create an inline widget from element, with specified controller class. Also should work on sugar.
	- [P5,Feature,Q] static_value directive should treat it's content as default value.
Parsers/Directives.js
	- [P5,Dev,Q] resources: need &lt;component path="..."&gt; tag inside &lt;resources&gt; to shorten paths
	- [P4,Dev] set_config_options template editing task:
		1) allow to set several options at once (via &lt;assigns&gt; collection) <br/>
		2) allow to use user-defined function as filter condition <br/>
		3) allow to select several items at once
Parsers/TemplateParser.js
	- [P5,Feature,Q] allow to set class for widget extenders
	- [P4,Feature] implement removal of empty space from templates
	- [P5,Feature,Q] &lt;x:region&gt; directive for includes: it will allow to cut off pieces of template depending on options
	- [P5,Refactoring] remove unused lexer switch preserve_whitespace
	- [P5,Fix,Dev] _parseStyleAttribute: currently will not parse style strings which contain strings with semicolon inside them as style value
		// do not use such styles, use classes!
Parsers/ExpressionParser.js
	- [P5,Feature,Q] macros to shorten the ternary operator, for example: "{is_active -&gt; 'active'}"
	- [P3,Feature, Performance] currently, each time any variable is referenced in argument's source code - it creates a new binding config.
		Parser must unite bindings to the same variable referenced multiple times.
	- [P3,Feature] static arguments must have their value in configs
	- [P5,Refactoring] remove the dn() operator. It's existence is not possible with current architecture.
		Finish the up() operator, or remove it also.
System/App.class.js
	- [P3,Feature] app.createModule(config) - create a module with given schema
System/Enumerable.class.js
	- [P3,Feature] methods moveIndex(old_index, new_index) and moveValue(value, new_index)
		// is equivalent of removeAt, than insertAt for given value. Preserves UID.
	- [P3, Performance] Enumerable is inherited from Properties, but does not use _properties and _property_listeners.
		They should not take space in constructed objects.
	- [P5, Performance] It's possible to optimize updateFromEnumerable - do not calculate diff if there are no listeners.
		Also inspect other functions for optimization.
System/PopoverManager.class.js
	- [P3,Bug] Tooltip blinks when moving cursor towards the tooltip
System/Sugar.class.js
	- [P5,Dev] always check that there are no redundant attributes on sugar tags
		// it's checked on root tag, but not on objects
	- [P5,Feature] allow to set the default widget config in sugar. It will allow to create a sugar with default options.
		// Reason: sometimes you will want to add options and other settings to sugar.
		// Such config must be merged properly.
	- [P5,Refactoring,Q] control attributes of sugar should be handled in Sugar class
	- [P3,Feature] when parsing sugar inside x:define and x:widget: sugar config must be merged with parent,
		and class name of sugar must be taken from config.
System/Template.class.js
	- [P5,Performance,Q] render() function compilation.
		// Take into account that code may be compressed
	- [P5,Feature] static IF/ELSEIF/ELSE construct.
		// will include parts of template by evaluating it's conditions once.
		// Faster than regular IF view, but does not react to changes.
System/ViewManager.class.js
	- [P5,Performance,Q] speed up event dispatching and argument evaluation. Cache target and scope. <br/>
		+ Late evaluation for event arguments, as event does not always has valid targets.
View/Foreach.class.js
	- [P3,Dev] "count" property must be read-only
	- [P5,Performance,Feature,Q] allow to reuse templates in Foreach
		// template may contain parameterized includes - such templates cannot be reused
View/Container/Element.class.js
	- [P1,Fix,Dev] if you render it's content and change any attribute before it's in DOM,
		than you will get wrong content in DOM. Make protection from such lifecycle.
		// make "is_rendered"/"waits_insertion" switch and throw an error, if setting a property while it's on
ClassManager.class.js
	- [P1,Feature] Add ability to store arrays in Shared (it may be named differently, like "Prototype")
		Move default input roles from InputAbstract to prototype
	- [P5,Feature,Q] Static members. Like Shared, but copied to prototype as-is. It's impossible to overwrite a Static member in inherited class.
	- [P5,Feature,Q] Function inheritance: check if function calls it's parent. If not - do not create a parent in the prototype.
	- [P3,Feature] mode, when classes are not exported. All classes exist only inside ClassManager, you can use .getConstructor() and .define()
	- [P5,Feature,Q] conditional members. Member will be in class when condition is true.
		// sometimes you want to create a build with different features included. Also some classes have debug members.
	- [P5,Feature] overrides: functions which does not need a parent
	- [P5,Feature] "final" functions and members - must not be overridden. Example: HierarchyMember._onRefreshed
	- [P5,Feature] abstract classes - classes with no constructor (instead there will be a function which throws an exception)
	- [P5,Feature] abstract functions - must be overridden in inherited classes.
		// Class with an abstract function which is not overridden - is also abstract.
		// When overriding happens - the parent function is not created
	- [P5,Feature,Q] empty class functions should not be in r[], they should be a reference somewhere to Lava.empty()/noop()
	- [P5,Feature,Q] all parent function names should be resolved automatically.
		// It will allow to insert a class in middle of the hierarchy.
		// Also assert there are no limitations for compression. <br/>
		// also rename &lt;%fname%&gt; macros in strings inside the function to current function's name (needed in exceptions).
	- [P5,Feature,Dev] wrapper for ClassManager to be used separately from the framework
	- [P5,Performance] Should it reserve nulls in object prototypes for those members, which are created in constructor?
		// Does it affect performance? Needs a test.
	- [P5,Feature] _staticInit - applied after the class is loaded or constructed, receives ClassData.
		// need to move container.Element IOS fixes into static constructor.
Serializer.js
	- [P5,Feature,Q] currently, serializing a string preserves the "\r\n" sequence.
		Convert it to "\n" by default and make a schema switch to return the old behaviour.
transitions.js
	- [P2,Fix] more transitions (*)
Cron.js
	- [P5,Performance] use requestAnimationFrame
Lava.js
	- [P5,Refactoring] namespaces reservation: move to a separate file (this will allow to generate it in user projects)
	- [P5,Feature] create a script, which generates the file with namespaces in Lava.
	- [P2,Feature] bootstrap() should process the control (x:) attributes, for example x:resource_id
Algorithms/Sorting/
	- [P5,Feature,Performance] Need fast unstable sort algorithm (*)

#Create widgets
	- [P3,Feature] Slider
		// with hidden input field
	- [P3,Feature] Menu
		// with keyboard navigation
	- [P3,Feature] Validator - a separate widget with visitor pattern for validation rules
		// wraps the input

#Existing widgets
Panels
	- [P2,Feature] when panels are collapsed, but the body stays in DOM - they should sleep() their content
Accordion
	- [P5,Feature] collapseAll()
Tree
	- [P3,Feature] must not contain Morph containers inside it
Select
	- [P3,Feature] there must be a sugar which parses it's content (optgroup and option tags)
		// it will be custom function, which is independent from Sugar class.
		// Schema will define where to put the result. <br/>
		// Requires Sugar modification.
	- [P5,Refactoring] browser fixes and code that accesses elements should be in Firestorm
DropDown
	- [P3,Feature] does not support the "disabled" class (is it needed?); "open" class should be assignable via option.
Calendar
	- [P5,Feature] should be constant size, support range selection and support full localization for "now" and month name
		// in some languages month and year numbers are not arabic
Inputs
	- [P5,Feature] working form_id attribute
	- [P3,Feature] validation for email input
	- [P3,Feature] input watermarks
		// in Lava they will be elements before the input, with negative margin. It's the most reliable way.

#New functionality
	- [P3,Feature] FocusManager - a class which routes keyboard input to it's current "focused" target
		(target is a widget, which supports the 'focusable' interface)
	- [P3,Feature] Lava.system.CollectionListener - batch add listeners to items in Enumerable collections

#Build
	- [P3,Refactoring] a better build script
	- [P5,Feature,Q] build script should remove unnecessary members that depend on switches
		// Example: Lava.exportTranslatableString should be removed, when Lava.schema.parsers.EXPORT_STRINGS is off
	- [P5,Feature] the Lava Node module must not be exported to global
	- [P5,Feature] build script should write version and commit hash to the result files

#Site
	- [P5,Feature] this list should be turned into something more usable.
		// People should be able to leave comments, vote for features they need, and gather requirements.
		// This may be done in external service.
	- [P5,Refactoring] the Widgets page must be assembled like Examples
	- [P3,Refactoring] there must be no calls to TemplateParser (via Lava.bootstrap) in the www directory. <br/>
		Everything must be assembled on server.
	- [P3,Feature] Widgets page: each widget must have a detailed description with usage, events, roles, properties and options
	- [P3,Feature] a demo of a native widget wrapper (for example, CodeMirror, color pickers or Select2)
	- [P5,Feature] there must be an ability to launch unit tests right on the framework site
	- [P5,Feature] code coverage for unit tests, that can be viewed online
	- [P2,Refactoring] code in examples on main page is a bit messy, build process is complicated. Correct it.

#Documentation
	- [P2,Feature] Generate automatic API docs. Must be JSDoc theme.
	- [P3,Feature] Doc system should validate class comments metadata
		// @extends and @lends must match the Extends and class name
	- [P3,Feature] Widget documentation must be generated automatically
		// including properties, events, options and sugar

#Maintenance
	- [P5,Feature] Automatic on-commit codestyle validation
		// one "var" per function, no camelCase, etc...
