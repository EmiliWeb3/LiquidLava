/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
Lava.ExpressionParser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"expressions":5,"SEMICOLON":6,"expression":7,"COMMA":8,"expressionTail":9,"operand":10,"OPERATOR":11,"OPEN_BRACE":12,"CLOSE_BRACE":13,"arrayDefinition":14,"NUMBER":15,"RAW_STRING":16,"LITERAL":17,"scopeEval":18,"functionCall":19,"OPEN_SQUARE":20,"expressionList":21,"CLOSE_SQUARE":22,"knownView":23,"VIEW_BY_LABEL":24,"VIEW_BY_ID":25,"VIEW_BY_NAME":26,"lookupOperator":27,"LOOK_UP":28,"LOOK_DOWN":29,"viewLocator":30,"DEEPNESS_OPERATOR":31,"GLOBAL_MODIFIER_CALL":32,"WIDGET_MODIFIER_CALL":33,"ACTIVE_MODIFIER_CALL":34,"IDENTIFIER":35,"scopePath":36,"SEARCH_OPERATOR":37,"scopePathSegment":38,"DOT_PROPERTY":39,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",6:"SEMICOLON",8:"COMMA",11:"OPERATOR",12:"OPEN_BRACE",13:"CLOSE_BRACE",15:"NUMBER",16:"RAW_STRING",17:"LITERAL",20:"OPEN_SQUARE",22:"CLOSE_SQUARE",24:"VIEW_BY_LABEL",25:"VIEW_BY_ID",26:"VIEW_BY_NAME",28:"LOOK_UP",29:"LOOK_DOWN",31:"DEEPNESS_OPERATOR",32:"GLOBAL_MODIFIER_CALL",33:"WIDGET_MODIFIER_CALL",34:"ACTIVE_MODIFIER_CALL",35:"IDENTIFIER",37:"SEARCH_OPERATOR",39:"DOT_PROPERTY"},
productions_: [0,[3,1],[3,2],[5,3],[5,3],[5,1],[7,1],[7,1],[7,2],[9,3],[9,2],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[14,3],[14,2],[21,3],[21,1],[23,1],[23,1],[23,1],[27,1],[27,1],[30,1],[30,2],[30,2],[30,3],[19,3],[19,4],[19,4],[19,5],[19,4],[19,5],[18,1],[18,2],[18,3],[18,2],[18,2],[36,2],[36,1],[38,1],[38,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
break;
case 2: 
break;
case 3:
			yy.assertSemicolonAllowed();
			yy.finishArgument($$[$0].trim());
		
break;
case 4:
			yy.assertCommaAllowed();
			yy.finishArgument($$[$0].trim());
		
break;
case 5: yy.finishArgument($$[$0].trim()); 
break;
case 6:
			yy.x_counters.expression_tails++;
			this.$ = $$[$0];
		
break;
case 7:
			yy.x_counters.operands++;
			this.$ = $$[$0];
		
break;
case 8:
			yy.x_counters.operands++;
			this.$ = $$[$0-1] + ' ' + $$[$0];
		
break;
case 9:
			yy.x_counters.operands++;
			this.$ = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0];
		
break;
case 10:
			yy.x_counters.operands++;
			this.$ = $$[$0-1] + ' ' + $$[$0];
		
break;
case 11:
			yy.x_counters.braces++;
			this.$ = '(' + $$[$0-1] + ')';
		
break;
case 12: this.$ = $$[$0]; 
break;
case 13:
			yy.x_counters.numbers++;
			this.$ = $$[$0];
		
break;
case 14:
			yy.x_counters.strings++;
			this.$ = $$[$0];
		
break;
case 15:
			yy.x_counters.literals++;
			this.$ = $$[$0];
		
break;
case 16:
			var index = yy.x_argument_binds.push($$[$0]) - 1;
			this.$ = 'this._binds[' + index + '].getValue()';
		
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = '[' + $$[$0-1] + ']'; 
break;
case 19: this.$ = '[]'; 
break;
case 20: this.$ = $$[$0-2] + ', ' + $$[$0]; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = {locator_type: 'Label', locator: $$[$0]}; 
break;
case 23: this.$ = {locator_type: 'Id', locator: $$[$0]}; 
break;
case 24: this.$ = {locator_type: 'Name', locator: $$[$0]}; 
break;
case 25: this.$ = {label: $$[$0], direction: 'look_up'}; 
break;
case 26: this.$ = {label: $$[$0], direction: 'look_down'}; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: Lava.throw("Lookup operator is not supported yet."); 
break;
case 29:
			$$[$0-1].depth = parseInt($$[$0]);
			if (!$$[$0-1].depth) Lava.throw('Deepness operator: depth must be > 0');
			this.$ = $$[$0-1];
		
break;
case 30: Lava.throw("Lookup operator is not supported yet."); 
break;
case 31:
			yy.x_counters.global_modifiers++;
			this.$ = 'this._callGlobalModifier("' + $$[$0-2] + '", [])';
		
break;
case 32:
			yy.x_counters.global_modifiers++;
			this.$ = 'this._callGlobalModifier("' + $$[$0-3] + '", [' + $$[$0-1] + '])';
		
break;
case 33:
			yy.x_counters.widget_modifiers++;
			$$[$0-3].callback_name = $$[$0-2];
			var index = yy.x_argument_widget_modifiers.push($$[$0-3]) - 1;
			this.$ = 'this._callModifier("' + index + '", [])';
		
break;
case 34:
			yy.x_counters.widget_modifiers++;
			$$[$0-4].callback_name = $$[$0-3];
			var index = yy.x_argument_widget_modifiers.push($$[$0-4]) - 1;
			this.$ = 'this._callModifier("' + index + '", [' + $$[$0-1] + '])';
		
break;
case 35:
			yy.x_counters.active_modifiers++;
			$$[$0-3].callback_name = $$[$0-2];
			var index = yy.x_argument_active_modifiers.push($$[$0-3]) - 1;
			this.$ = 'this._callActiveModifier("' + index + '", [])';
		
break;
case 36:
			yy.x_counters.active_modifiers++;
			$$[$0-4].callback_name = $$[$0-3];
			var index = yy.x_argument_active_modifiers.push($$[$0-4]) - 1;
			this.$ = 'this._callActiveModifier("' + index + '", [' + $$[$0-1] + '])';
		
break;
case 37: this.$ = {property_name: $$[$0]}; 
break;
case 38: this.$ = {property_name: $$[$0-1], tail: $$[$0]}; 
break;
case 39:
			$$[$0-2].property_name = $$[$0-1];
			$$[$0-2].tail = $$[$0];
			this.$ = $$[$0-2];
		
break;
case 40:
			$$[$0-1].property_name = $$[$0];
			this.$ = $$[$0-1];
		
break;
case 41: $$[$0-1].tail = $$[$0]; this.$ = $$[$0-1]; 
break;
case 42: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 43: this.$ = [$$[$0]]; 
break;
case 44: this.$ = $$[$0]; 
break;
case 45:
			var segments = $$[$0-1].path_segments;
			if (segments) {
				for (var i = 0, count = segments.length; i < count; i++) {
					if (typeof(segments[i]) == 'object') Lava.throw('Dynamic segment must not contain other dynamic segments');
				}
			}
			this.$ = $$[$0-1];
		
break;
}
},
table: [{3:1,4:[1,2],5:3,7:4,9:5,10:6,11:[1,7],12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{1:[3]},{1:[2,1]},{4:[1,23],6:[1,24],8:[1,25]},{4:[2,5],6:[2,5],8:[2,5]},{4:[2,6],6:[2,6],8:[2,6],11:[1,26],13:[2,6],22:[2,6]},{4:[2,7],6:[2,7],8:[2,7],9:27,11:[1,7],13:[2,7],22:[2,7]},{10:28,12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{7:29,9:5,10:6,11:[1,7],12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{4:[2,12],6:[2,12],8:[2,12],11:[2,12],13:[2,12],22:[2,12]},{4:[2,13],6:[2,13],8:[2,13],11:[2,13],13:[2,13],22:[2,13]},{4:[2,14],6:[2,14],8:[2,14],11:[2,14],13:[2,14],22:[2,14]},{4:[2,15],6:[2,15],8:[2,15],11:[2,15],13:[2,15],22:[2,15]},{4:[2,16],6:[2,16],8:[2,16],11:[2,16],13:[2,16],22:[2,16]},{4:[2,17],6:[2,17],8:[2,17],11:[2,17],13:[2,17],22:[2,17]},{7:32,9:5,10:6,11:[1,7],12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],21:30,22:[1,31],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{4:[2,37],6:[2,37],8:[2,37],11:[2,37],13:[2,37],20:[1,36],22:[2,37],36:33,38:34,39:[1,35]},{20:[1,36],36:38,37:[1,37],38:34,39:[1,35]},{12:[1,39]},{20:[2,27],27:42,28:[1,44],29:[1,45],31:[1,43],33:[1,40],34:[1,41],37:[2,27],39:[2,27]},{20:[2,22],28:[2,22],29:[2,22],31:[2,22],33:[2,22],34:[2,22],37:[2,22],39:[2,22]},{20:[2,23],28:[2,23],29:[2,23],31:[2,23],33:[2,23],34:[2,23],37:[2,23],39:[2,23]},{20:[2,24],28:[2,24],29:[2,24],31:[2,24],33:[2,24],34:[2,24],37:[2,24],39:[2,24]},{1:[2,2]},{7:46,9:5,10:6,11:[1,7],12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{7:47,9:5,10:6,11:[1,7],12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{10:48,12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{4:[2,8],6:[2,8],8:[2,8],11:[1,26],13:[2,8],22:[2,8]},{4:[2,10],6:[2,10],8:[2,10],11:[2,10],13:[2,10],22:[2,10]},{13:[1,49]},{8:[1,51],22:[1,50]},{4:[2,19],6:[2,19],8:[2,19],11:[2,19],13:[2,19],22:[2,19]},{8:[2,21],13:[2,21],22:[2,21]},{4:[2,38],6:[2,38],8:[2,38],11:[2,38],13:[2,38],20:[1,36],22:[2,38],38:52,39:[1,35]},{4:[2,43],6:[2,43],8:[2,43],11:[2,43],13:[2,43],20:[2,43],22:[2,43],39:[2,43]},{4:[2,44],6:[2,44],8:[2,44],11:[2,44],13:[2,44],20:[2,44],22:[2,44],39:[2,44]},{18:53,23:54,24:[1,20],25:[1,21],26:[1,22],30:17,35:[1,16]},{4:[2,40],6:[2,40],8:[2,40],11:[2,40],13:[2,40],20:[1,36],22:[2,40],36:55,38:34,39:[1,35]},{4:[2,41],6:[2,41],8:[2,41],11:[2,41],13:[2,41],20:[1,36],22:[2,41],38:52,39:[1,35]},{7:32,9:5,10:6,11:[1,7],12:[1,8],13:[1,56],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],21:57,23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{12:[1,58]},{12:[1,59]},{20:[2,28],37:[2,28],39:[2,28]},{20:[2,29],27:60,28:[1,44],29:[1,45],37:[2,29],39:[2,29]},{20:[2,25],37:[2,25],39:[2,25]},{20:[2,26],37:[2,26],39:[2,26]},{4:[2,3],6:[2,3],8:[2,3]},{4:[2,4],6:[2,4],8:[2,4]},{4:[2,9],6:[2,9],8:[2,9],11:[2,9],13:[2,9],22:[2,9]},{4:[2,11],6:[2,11],8:[2,11],11:[2,11],13:[2,11],22:[2,11]},{4:[2,18],6:[2,18],8:[2,18],11:[2,18],13:[2,18],22:[2,18]},{7:61,9:5,10:6,11:[1,7],12:[1,8],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{4:[2,42],6:[2,42],8:[2,42],11:[2,42],13:[2,42],20:[2,42],22:[2,42],39:[2,42]},{22:[1,62]},{20:[2,27],27:42,28:[1,44],29:[1,45],31:[1,43],37:[2,27],39:[2,27]},{4:[2,39],6:[2,39],8:[2,39],11:[2,39],13:[2,39],20:[1,36],22:[2,39],38:52,39:[1,35]},{4:[2,31],6:[2,31],8:[2,31],11:[2,31],13:[2,31],22:[2,31]},{8:[1,51],13:[1,63]},{7:32,9:5,10:6,11:[1,7],12:[1,8],13:[1,64],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],21:65,23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{7:32,9:5,10:6,11:[1,7],12:[1,8],13:[1,66],14:9,15:[1,10],16:[1,11],17:[1,12],18:13,19:14,20:[1,15],21:67,23:19,24:[1,20],25:[1,21],26:[1,22],30:17,32:[1,18],35:[1,16]},{20:[2,30],37:[2,30],39:[2,30]},{8:[2,20],13:[2,20],22:[2,20]},{4:[2,45],6:[2,45],8:[2,45],11:[2,45],13:[2,45],20:[2,45],22:[2,45],39:[2,45]},{4:[2,32],6:[2,32],8:[2,32],11:[2,32],13:[2,32],22:[2,32]},{4:[2,33],6:[2,33],8:[2,33],11:[2,33],13:[2,33],22:[2,33]},{8:[1,51],13:[1,68]},{4:[2,35],6:[2,35],8:[2,35],11:[2,35],13:[2,35],22:[2,35]},{8:[1,51],13:[1,69]},{4:[2,34],6:[2,34],8:[2,34],11:[2,34],13:[2,34],22:[2,34]},{4:[2,36],6:[2,36],8:[2,36],11:[2,36],13:[2,36],22:[2,36]}],
defaultActions: {2:[2,1],23:[2,2]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]
}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){if(this.options.backtrack_lexer){delete backup}return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}if(this.options.backtrack_lexer){delete backup}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: Lava.throw('Spaces between function name and opening brace are not allowed (1)'); 
break;
case 1: Lava.throw('Spaces between function name and opening brace are not allowed (1)'); 
break;
case 2: Lava.throw('Spaces between function name and opening brace are not allowed (2)'); 
break;
case 3: Lava.throw('Spaces in scope path are not allowed (1)'); 
break;
case 4: Lava.throw('Spaces in scope path are not allowed (2)'); 
break;
case 5: yy_.yytext = yy_.yytext.slice(1); return 24; 
break;
case 6: yy_.yytext = yy_.yytext.slice(1); return 25; 
break;
case 7: yy_.yytext = yy_.yytext.slice(1); return 26; 
break;
case 8: yy_.yytext = yy_.yytext.slice(2); return 34; 
break;
case 9: yy_.yytext = yy_.yytext.slice(5); return 34; 
break;
case 10: yy_.yytext = yy_.yytext.slice(1); return 33; 
break;
case 11: return 32; 
break;
case 12: yy_.yytext = yy_.yytext.slice(1); return 31; 
break;
case 13: yy_.yytext = yy_.yytext.slice(1); return 39; 
break;
case 14: yy_.yytext = yy_.yytext.slice(2); return 37; 
break;
case 15: yy_.yytext = yy_.yytext.slice(5); return 37; 
break;
case 16: yy_.yytext = yy_.yytext.substr(4, yy_.yyleng - 5); return 28; 
break;
case 17: yy_.yytext = yy_.yytext.substr(4, yy_.yyleng - 5); return 29; 
break;
case 18: yy_.yytext = yy.unescape(yy_.yytext); return 11; /*escaped operator versions*/ 
break;
case 19: yy_.yytext = yy.unescape(yy_.yytext); return 11; /*escaped operator versions + "&", "&&" */ 
break;
case 20: return 11; /*arithmetic*/ 
break;
case 21: return 11; /*logical, without "&&" and "!" */ 
break;
case 22: return 11; /*comparison*/ 
break;
case 23: return 11; /*bitwise, without "&" */ 
break;
case 24: return 11; /*ternary*/ 
break;
case 25: return 11; /*unary*/ 
break;
case 26: return 8; 
break;
case 27: return 6; 
break;
case 28: return 15; 
break;
case 29: return 15; 
break;
case 30: return 16; 
break;
case 31: return 16; 
break;
case 32: return 20; 
break;
case 33: return 22; 
break;
case 34: /* skip whitespace */ 
break;
case 35:
		this.x_lex_brace_levels++;
		return 12;
	
break;
case 36:
		if (this.x_tail_mode && this.x_lex_brace_levels == 0) {
			this.x_input_tail_length = this._input.length;
			this._input = '';
			this.done = true;
			return 4;
		} else {
			this.x_lex_brace_levels--;
			return 13;
		}
	
break;
case 37:
		var lowercase = yy_.yytext.toLowerCase();
		var map = {
			'lt': '<',
			'gt': '>',
			'and': '&&'
		};

		if (lowercase == 'this') Lava.throw("'this' is reserved word. Are you missing the Label sign (@)?");
		if ((lowercase in map) && lowercase != yy_.yytext) Lava.throw("Expression parser: 'lt', 'gt', 'and' must be lower case");

		if (lowercase in map) {
			yy_.yytext = map[lowercase];
			return 11;
		}

		if (Lava.parsers.Common.isLiteral(yy_.yytext)) {
			if (lowercase != yy_.yytext) Lava.throw("Expression parser, code style: literals must be lower case");
			return 17;
		}

		return 35;
	
break;
case 38: return 4; 
break;
}
},
rules: [/^(?:->([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\s+)\()/,/^(?:-&gt;([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\s+)\()/,/^(?:\.([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\s+)\()/,/^(?:\s+[\~\.\[\]])/,/^(?:\[\s\b)/,/^(?:@([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:#([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:\$([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:->([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:-&gt;([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:\.([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:~\d+)/,/^(?:\.[a-zA-Z0-9\_]+)/,/^(?:->([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:-&gt;([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?::up\(([a-zA-Z\_][a-zA-Z0-9\_]*)\))/,/^(?::dn\(([a-zA-Z\_][a-zA-Z0-9\_]*)\))/,/^(?:(&lt;|&gt;))/,/^(?:(&amp;|&lt;|&gt;|&)+)/,/^(?:[\+\-\*\/\%])/,/^(?:\|\||!!)/,/^(?:===|!==|==|!=|<=|>=|<|>)/,/^(?:>>>|>>|<<|[\|\^])/,/^(?:[\?\:])/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\d+(\.\d+)?((e|E)(\+|-)\d+)?)/,/^(?:0x[a-fA-F0-9]+)/,/^(?:"(\\"|[^"])*")/,/^(?:'(\\'|[^'])*')/,/^(?:\[(?=[^\s]))/,/^(?:\])/,/^(?:\s+)/,/^(?:\()/,/^(?:\))/,/^(?:([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


