/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
Lava.ExpressionParser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"expressions":5,"SEMICOLON":6,"expressionWithOptionalDepends":7,"COMMA":8,"depends":9,"DEPENDS_START":10,"OPEN_CURLY":11,"scopeEvalList":12,"CLOSE_CURLY":13,"scopeEval":14,"expression":15,"expressionTail":16,"operand":17,"OPERATOR":18,"OPEN_BRACE":19,"CLOSE_BRACE":20,"arrayDefinition":21,"NUMBER":22,"RAW_STRING":23,"LITERAL":24,"dynamicScope":25,"functionCall":26,"OPEN_SQUARE":27,"expressionList":28,"CLOSE_SQUARE":29,"knownView":30,"VIEW_BY_LABEL":31,"VIEW_BY_ID":32,"VIEW_BY_NAME":33,"lookupOperator":34,"LOOK_UP":35,"LOOK_DOWN":36,"viewLocator":37,"DEEPNESS_OPERATOR":38,"GLOBAL_MODIFIER_CALL":39,"WIDGET_MODIFIER_CALL":40,"ACTIVE_MODIFIER_CALL":41,"IDENTIFIER":42,"scopePath":43,"SEARCH_OPERATOR":44,"scopePathSegment":45,"DOT_PROPERTY":46,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",6:"SEMICOLON",8:"COMMA",10:"DEPENDS_START",11:"OPEN_CURLY",13:"CLOSE_CURLY",18:"OPERATOR",19:"OPEN_BRACE",20:"CLOSE_BRACE",22:"NUMBER",23:"RAW_STRING",24:"LITERAL",27:"OPEN_SQUARE",29:"CLOSE_SQUARE",31:"VIEW_BY_LABEL",32:"VIEW_BY_ID",33:"VIEW_BY_NAME",35:"LOOK_UP",36:"LOOK_DOWN",38:"DEEPNESS_OPERATOR",39:"GLOBAL_MODIFIER_CALL",40:"WIDGET_MODIFIER_CALL",41:"ACTIVE_MODIFIER_CALL",42:"IDENTIFIER",44:"SEARCH_OPERATOR",46:"DOT_PROPERTY"},
productions_: [0,[3,1],[3,2],[5,3],[5,3],[5,1],[9,4],[12,3],[12,1],[7,2],[7,1],[15,1],[15,1],[15,2],[16,3],[16,2],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[21,3],[21,2],[28,3],[28,1],[30,1],[30,1],[30,1],[34,1],[34,1],[37,1],[37,2],[37,2],[37,3],[26,3],[26,4],[26,4],[26,5],[26,4],[26,5],[25,4],[14,1],[14,2],[14,3],[14,2],[14,2],[43,2],[43,1],[45,1],[45,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
break;
case 2: 
break;
case 3:
			yy.assertSemicolonAllowed();
			yy.finishArgument($$[$0].trim());
		
break;
case 4:
			yy.assertCommaAllowed();
			yy.finishArgument($$[$0].trim());
		
break;
case 5: yy.finishArgument($$[$0].trim()); 
break;
case 7: yy.x_argument_binds.push($$[$0]); 
break;
case 8: yy.x_argument_binds.push($$[$0]); 
break;
case 9: this.$ = $$[$0-1]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11:
			yy.x_counters.expression_tails++;
			this.$ = $$[$0];
		
break;
case 12:
			yy.x_counters.operands++;
			this.$ = $$[$0];
		
break;
case 13:
			yy.x_counters.operands++;
			yy.x_counters.expression_tails++;
			this.$ = $$[$0-1] + ' ' + $$[$0];
		
break;
case 14:
			yy.x_counters.operands++;
			this.$ = $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0];
		
break;
case 15:
			yy.x_counters.operands++;
			this.$ = $$[$0-1] + ' ' + $$[$0];
		
break;
case 16:
			yy.x_counters.braces++;
			this.$ = '(' + $$[$0-1] + ')';
		
break;
case 17: this.$ = $$[$0]; 
break;
case 18:
			yy.x_counters.numbers++;
			this.$ = $$[$0];
		
break;
case 19:
			yy.x_counters.strings++;
			this.$ = $$[$0];
		
break;
case 20:
			yy.x_counters.literals++;
			this.$ = $$[$0];
		
break;
case 21:
			var index = yy.x_argument_binds.push($$[$0]) - 1;
			this.$ = 'this._binds[' + index + '].getValue()';
		
break;
case 22:
			yy.x_counters.dynamic_scopes++;
			var index = yy.x_argument_binds.push($$[$0]) - 1;
			this.$ = 'this._binds[' + index + '].getValue()';
		
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = '[' + $$[$0-1] + ']'; 
break;
case 25: this.$ = '[]'; 
break;
case 26: this.$ = $$[$0-2] + ', ' + $$[$0]; 
break;
case 27: this.$ = $$[$0]; 
break;
case 28: this.$ = {locator_type: 'Label', locator: $$[$0]}; 
break;
case 29: this.$ = {locator_type: 'Id', locator: $$[$0]}; 
break;
case 30: this.$ = {locator_type: 'Name', locator: $$[$0]}; 
break;
case 31: this.$ = {label: $$[$0], direction: 'look_up'}; 
break;
case 32: this.$ = {label: $$[$0], direction: 'look_down'}; 
break;
case 33: this.$ = $$[$0]; 
break;
case 34: Lava.t("Lookup operator is not supported yet."); 
break;
case 35:
			$$[$0-1].depth = parseInt($$[$0]);
			if (!$$[$0-1].depth) Lava.t('Deepness operator: depth must be > 0');
			this.$ = $$[$0-1];
		
break;
case 36: Lava.t("Lookup operator is not supported yet."); 
break;
case 37:
			yy.x_counters.global_modifiers++;
			this.$ = 'this._callGlobalModifier("' + $$[$0-2] + '", [])';
		
break;
case 38:
			yy.x_counters.global_modifiers++;
			this.$ = 'this._callGlobalModifier("' + $$[$0-3] + '", [' + $$[$0-1] + '])';
		
break;
case 39:
			yy.x_counters.widget_modifiers++;
			$$[$0-3].callback_name = $$[$0-2];
			var index = yy.x_argument_widget_modifiers.push($$[$0-3]) - 1;
			this.$ = 'this._callModifier("' + index + '", [])';
		
break;
case 40:
			yy.x_counters.widget_modifiers++;
			$$[$0-4].callback_name = $$[$0-3];
			var index = yy.x_argument_widget_modifiers.push($$[$0-4]) - 1;
			this.$ = 'this._callModifier("' + index + '", [' + $$[$0-1] + '])';
		
break;
case 41:
			yy.x_counters.active_modifiers++;
			$$[$0-3].callback_name = $$[$0-2];
			var index = yy.x_argument_active_modifiers.push($$[$0-3]) - 1;
			this.$ = 'this._callActiveModifier("' + index + '", [])';
		
break;
case 42:
			yy.x_counters.active_modifiers++;
			$$[$0-4].callback_name = $$[$0-3];
			var index = yy.x_argument_active_modifiers.push($$[$0-4]) - 1;
			this.$ = 'this._callActiveModifier("' + index + '", [' + $$[$0-1] + '])';
		
break;
case 43:
			$$[$0-3].isDynamic = true;
			$$[$0-3].property_name = $$[$0-1];
			this.$ = $$[$0-3];
		
break;
case 44: this.$ = {property_name: $$[$0]}; 
break;
case 45: this.$ = {property_name: $$[$0-1], tail: $$[$0]}; 
break;
case 46:
			$$[$0-2].property_name = $$[$0-1];
			$$[$0-2].tail = $$[$0];
			this.$ = $$[$0-2];
		
break;
case 47:
			$$[$0-1].property_name = $$[$0];
			this.$ = $$[$0-1];
		
break;
case 48: $$[$0-1].tail = $$[$0]; this.$ = $$[$0-1]; 
break;
case 49: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 50: this.$ = [$$[$0]]; 
break;
case 51: this.$ = $$[$0]; 
break;
case 52:
			var segments = $$[$0-1].path_segments;
			if (segments) {
				for (var i = 0, count = segments.length; i < count; i++) {
					if (typeof(segments[i]) == 'object') Lava.t('Dynamic segment must not contain other dynamic segments');
				}
			}
			this.$ = $$[$0-1];
		
break;
}
},
table: [{3:1,4:[1,2],5:3,7:4,14:14,15:5,16:6,17:7,18:[1,8],19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{1:[3]},{1:[2,1]},{4:[1,25],6:[1,26],8:[1,27]},{4:[2,5],6:[2,5],8:[2,5]},{4:[2,10],6:[2,10],8:[2,10],9:28,10:[1,29]},{4:[2,11],6:[2,11],8:[2,11],10:[2,11],18:[1,30],20:[2,11],29:[2,11]},{4:[2,12],6:[2,12],8:[2,12],10:[2,12],16:31,18:[1,8],20:[2,12],29:[2,12]},{14:14,17:32,19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{14:14,15:33,16:6,17:7,18:[1,8],19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{4:[2,17],6:[2,17],8:[2,17],10:[2,17],18:[2,17],20:[2,17],29:[2,17]},{4:[2,18],6:[2,18],8:[2,18],10:[2,18],18:[2,18],20:[2,18],29:[2,18]},{4:[2,19],6:[2,19],8:[2,19],10:[2,19],18:[2,19],20:[2,19],29:[2,19]},{4:[2,20],6:[2,20],8:[2,20],10:[2,20],18:[2,20],20:[2,20],29:[2,20]},{4:[2,21],6:[2,21],8:[2,21],10:[2,21],18:[2,21],20:[2,21],29:[2,21]},{4:[2,22],6:[2,22],8:[2,22],10:[2,22],18:[2,22],20:[2,22],29:[2,22]},{4:[2,23],6:[2,23],8:[2,23],10:[2,23],18:[2,23],20:[2,23],29:[2,23]},{14:14,15:36,16:6,17:7,18:[1,8],19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],28:34,29:[1,35],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{4:[2,44],6:[2,44],8:[2,44],10:[2,44],13:[2,44],18:[2,44],20:[2,44],27:[1,40],29:[2,44],43:37,45:38,46:[1,39]},{27:[1,40],43:42,44:[1,41],45:38,46:[1,39]},{11:[1,43],27:[2,33],34:46,35:[1,48],36:[1,49],38:[1,47],40:[1,44],41:[1,45],44:[2,33],46:[2,33]},{19:[1,50]},{11:[2,28],27:[2,28],35:[2,28],36:[2,28],38:[2,28],40:[2,28],41:[2,28],44:[2,28],46:[2,28]},{11:[2,29],27:[2,29],35:[2,29],36:[2,29],38:[2,29],40:[2,29],41:[2,29],44:[2,29],46:[2,29]},{11:[2,30],27:[2,30],35:[2,30],36:[2,30],38:[2,30],40:[2,30],41:[2,30],44:[2,30],46:[2,30]},{1:[2,2]},{7:51,14:14,15:5,16:6,17:7,18:[1,8],19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{7:52,14:14,15:5,16:6,17:7,18:[1,8],19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{4:[2,9],6:[2,9],8:[2,9]},{11:[1,53]},{14:14,17:54,19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{4:[2,13],6:[2,13],8:[2,13],10:[2,13],18:[1,30],20:[2,13],29:[2,13]},{4:[2,15],6:[2,15],8:[2,15],10:[2,15],18:[2,15],20:[2,15],29:[2,15]},{20:[1,55]},{8:[1,57],29:[1,56]},{4:[2,25],6:[2,25],8:[2,25],10:[2,25],18:[2,25],20:[2,25],29:[2,25]},{8:[2,27],20:[2,27],29:[2,27]},{4:[2,45],6:[2,45],8:[2,45],10:[2,45],13:[2,45],18:[2,45],20:[2,45],27:[1,40],29:[2,45],45:58,46:[1,39]},{4:[2,50],6:[2,50],8:[2,50],10:[2,50],13:[2,50],18:[2,50],20:[2,50],27:[2,50],29:[2,50],46:[2,50]},{4:[2,51],6:[2,51],8:[2,51],10:[2,51],13:[2,51],18:[2,51],20:[2,51],27:[2,51],29:[2,51],46:[2,51]},{14:59,30:60,31:[1,22],32:[1,23],33:[1,24],37:19,42:[1,18]},{4:[2,47],6:[2,47],8:[2,47],10:[2,47],13:[2,47],18:[2,47],20:[2,47],27:[1,40],29:[2,47],43:61,45:38,46:[1,39]},{4:[2,48],6:[2,48],8:[2,48],10:[2,48],13:[2,48],18:[2,48],20:[2,48],27:[1,40],29:[2,48],45:58,46:[1,39]},{42:[1,62]},{19:[1,63]},{19:[1,64]},{27:[2,34],44:[2,34],46:[2,34]},{27:[2,35],34:65,35:[1,48],36:[1,49],44:[2,35],46:[2,35]},{27:[2,31],44:[2,31],46:[2,31]},{27:[2,32],44:[2,32],46:[2,32]},{14:14,15:36,16:6,17:7,18:[1,8],19:[1,9],20:[1,66],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],28:67,30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{4:[2,3],6:[2,3],8:[2,3]},{4:[2,4],6:[2,4],8:[2,4]},{12:68,14:69,30:60,31:[1,22],32:[1,23],33:[1,24],37:19,42:[1,18]},{4:[2,14],6:[2,14],8:[2,14],10:[2,14],18:[2,14],20:[2,14],29:[2,14]},{4:[2,16],6:[2,16],8:[2,16],10:[2,16],18:[2,16],20:[2,16],29:[2,16]},{4:[2,24],6:[2,24],8:[2,24],10:[2,24],18:[2,24],20:[2,24],29:[2,24]},{14:14,15:70,16:6,17:7,18:[1,8],19:[1,9],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{4:[2,49],6:[2,49],8:[2,49],10:[2,49],13:[2,49],18:[2,49],20:[2,49],27:[2,49],29:[2,49],46:[2,49]},{29:[1,71]},{27:[2,33],34:46,35:[1,48],36:[1,49],38:[1,47],44:[2,33],46:[2,33]},{4:[2,46],6:[2,46],8:[2,46],10:[2,46],13:[2,46],18:[2,46],20:[2,46],27:[1,40],29:[2,46],45:58,46:[1,39]},{13:[1,72]},{14:14,15:36,16:6,17:7,18:[1,8],19:[1,9],20:[1,73],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],28:74,30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{14:14,15:36,16:6,17:7,18:[1,8],19:[1,9],20:[1,75],21:10,22:[1,11],23:[1,12],24:[1,13],25:15,26:16,27:[1,17],28:76,30:20,31:[1,22],32:[1,23],33:[1,24],37:19,39:[1,21],42:[1,18]},{27:[2,36],44:[2,36],46:[2,36]},{4:[2,37],6:[2,37],8:[2,37],10:[2,37],18:[2,37],20:[2,37],29:[2,37]},{8:[1,57],20:[1,77]},{8:[1,79],13:[1,78]},{8:[2,8],13:[2,8]},{8:[2,26],20:[2,26],29:[2,26]},{4:[2,52],6:[2,52],8:[2,52],10:[2,52],13:[2,52],18:[2,52],20:[2,52],27:[2,52],29:[2,52],46:[2,52]},{4:[2,43],6:[2,43],8:[2,43],10:[2,43],18:[2,43],20:[2,43],29:[2,43]},{4:[2,39],6:[2,39],8:[2,39],10:[2,39],18:[2,39],20:[2,39],29:[2,39]},{8:[1,57],20:[1,80]},{4:[2,41],6:[2,41],8:[2,41],10:[2,41],18:[2,41],20:[2,41],29:[2,41]},{8:[1,57],20:[1,81]},{4:[2,38],6:[2,38],8:[2,38],10:[2,38],18:[2,38],20:[2,38],29:[2,38]},{4:[2,6],6:[2,6],8:[2,6]},{14:82,30:60,31:[1,22],32:[1,23],33:[1,24],37:19,42:[1,18]},{4:[2,40],6:[2,40],8:[2,40],10:[2,40],18:[2,40],20:[2,40],29:[2,40]},{4:[2,42],6:[2,42],8:[2,42],10:[2,42],18:[2,42],20:[2,42],29:[2,42]},{8:[2,7],13:[2,7]}],
defaultActions: {2:[2,1],25:[2,2]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = (Object.getPrototypeOf ? Object.getPrototypeOf(this) : this.__proto__).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]
}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){if(this.options.backtrack_lexer){delete backup}return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}if(this.options.backtrack_lexer){delete backup}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: Lava.t('Spaces between function name and opening brace are not allowed (1)'); 
break;
case 1: Lava.t('Spaces between function name and opening brace are not allowed (1)'); 
break;
case 2: Lava.t('Spaces between function name and opening brace are not allowed (2)'); 
break;
case 3: Lava.t('Spaces in scope path are not allowed (1)'); 
break;
case 4: Lava.t('Spaces in scope path are not allowed (2)'); 
break;
case 5: yy_.yytext = yy_.yytext.slice(1); return 31; 
break;
case 6: yy_.yytext = yy_.yytext.slice(1); return 32; 
break;
case 7: yy_.yytext = yy_.yytext.slice(1); return 33; 
break;
case 8: yy_.yytext = yy_.yytext.slice(2); return 41; 
break;
case 9: yy_.yytext = yy_.yytext.slice(5); return 41; 
break;
case 10: yy_.yytext = yy_.yytext.slice(1); return 40; 
break;
case 11: return 39; 
break;
case 12: yy_.yytext = yy_.yytext.slice(1); return 38; 
break;
case 13: yy_.yytext = yy_.yytext.slice(1); return 46; 
break;
case 14: yy_.yytext = yy_.yytext.slice(2); return 44; 
break;
case 15: yy_.yytext = yy_.yytext.slice(5); return 44; 
break;
case 16: yy_.yytext = yy_.yytext.substr(4, yy_.yyleng - 5); return 35; 
break;
case 17: yy_.yytext = yy_.yytext.substr(4, yy_.yyleng - 5); return 36; 
break;
case 18: yy_.yytext = yy.unescape(yy_.yytext); return 18; /*escaped operator versions*/ 
break;
case 19: yy_.yytext = yy.unescape(yy_.yytext); return 18; /*escaped operator versions + "&", "&&" */ 
break;
case 20: return 18; /*arithmetic*/ 
break;
case 21: return 18; /*logical, without "&&" and "!" */ 
break;
case 22: return 18; /*comparison*/ 
break;
case 23: return 18; /*bitwise, without "&" */ 
break;
case 24: return 18; /*ternary*/ 
break;
case 25: return 18; /*unary*/ 
break;
case 26: return 8; 
break;
case 27: return 6; 
break;
case 28: return 22; 
break;
case 29: return 22; 
break;
case 30: return 23; 
break;
case 31: return 23; 
break;
case 32: return 27; 
break;
case 33: return 29; 
break;
case 34: /* skip whitespace */ 
break;
case 35: return 10; 
break;
case 36: return 11; 
break;
case 37: return 13; 
break;
case 38:
		this.x_lex_brace_levels++;
		return 19;
	
break;
case 39:
		if (this.x_tail_mode && this.x_lex_brace_levels == 0) {
			this.x_input_tail_length = this._input.length;
			this._input = '';
			this.done = true;
			return 4;
		} else {
			this.x_lex_brace_levels--;
			return 20;
		}
	
break;
case 40:
		var lowercase = yy_.yytext.toLowerCase();
		var map = {
			'lt': '<',
			'gt': '>',
			'and': '&&'
		};

		if (lowercase == 'this') Lava.t("'this' is reserved word. Are you missing the Label sign (@)?");
		if ((lowercase in map) && lowercase != yy_.yytext) Lava.t("Expression parser: 'lt', 'gt', 'and' must be lower case");

		if (lowercase in map) {
			yy_.yytext = map[lowercase];
			return 18;
		}

		if (Lava.parsers.Common.isLiteral(yy_.yytext)) {
			if (lowercase != yy_.yytext) Lava.t("Expression parser, code style: literals must be lower case");
			return 24;
		}

		return 42;
	
break;
case 41: return 4; 
break;
}
},
rules: [/^(?:->([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\s+)\()/,/^(?:-&gt;([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\s+)\()/,/^(?:\.([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\s+)\()/,/^(?:\s+[\~\.\[\]])/,/^(?:\[\s\b)/,/^(?:@([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:#([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:\$([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:->([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:-&gt;([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:\.([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:([a-zA-Z\_][a-zA-Z0-9\_]*)(?=\())/,/^(?:~\d+)/,/^(?:\.[a-zA-Z0-9\_]+)/,/^(?:->([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:-&gt;([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?::up\(([a-zA-Z\_][a-zA-Z0-9\_]*)\))/,/^(?::dn\(([a-zA-Z\_][a-zA-Z0-9\_]*)\))/,/^(?:(&lt;|&gt;))/,/^(?:(&amp;|&lt;|&gt;|&)+)/,/^(?:[\+\-\*\/\%])/,/^(?:\|\||!!)/,/^(?:===|!==|==|!=|<=|>=|<|>)/,/^(?:>>>|>>|<<|[\|\^])/,/^(?:[\?\:])/,/^(?:!)/,/^(?:,)/,/^(?:;)/,/^(?:\d+(\.\d+)?((e|E)(\+|-)\d+)?)/,/^(?:0x[a-fA-F0-9]+)/,/^(?:"(\\"|[^"])*")/,/^(?:'(\\'|[^'])*')/,/^(?:\[(?=[^\s]))/,/^(?:\])/,/^(?:\s+)/,/^(?:\/\/depends\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:([a-zA-Z\_][a-zA-Z0-9\_]*))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


